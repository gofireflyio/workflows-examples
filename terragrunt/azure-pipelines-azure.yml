trigger:
  branches:
    include:
    - main
  paths:
    include:
    - azure-stag/**
pr:
  branches:
    include:
    - main
  paths:
    include:
    - azure-stag/**
pool:
  vmImage: ubuntu-latest
parameters:
- name: applyChanges
  displayName: Should apply Terraform changes?
  type: boolean
  default: "false"
variables:
- group: fireflySecrets
- group: Terraform_SPN
- name: fireflyAccessKey
  value: $[variables.FIREFLY_ACCESS_KEY]
- name: fireflySecretKey
  value: $[variables.FIREFLY_SECRET_KEY]
- name: apply
  ${{ if eq( variables['Build.Reason'], 'Manual' ) }}:
    value: ${{ parameters.applyChanges }}
  ${{ elseif and( eq( variables['Build.Reason'], 'IndividualCI' ), eq( variables['Build.SourceBranch'], 'refs/heads/main' ) ) }}:
    value: true
  ${{ else }}:
    value: false
stages:
- stage: DeployTerraformWorkspace
  displayName: Deploy Terraform Workspace
  jobs:
  - job: DeployTerraformWorkspace
    displayName: Deploy Terraform Workspace
    steps:
    - checkout: self
      fetchDepth: 0
      persistCredentials: true
      displayName: Checkout Repository
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 1.8.1
      displayName: Install Terraform
    - script: |
        # Install Terragrunt
        curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/latest/download/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/
        terragrunt --version
      displayName: Install Terragrunt
    - script: |
        terragrunt run-all init --terragrunt-non-interactive
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      displayName: Terragrunt Init
      workingDirectory: $(System.DefaultWorkingDirectory)/azure-stag
    - script: |
        terragrunt run-all plan \
          --terragrunt-out-dir /tmp/outputs \
          --terragrunt-json-out /tmp/outputs \
          --terragrunt-non-interactive
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      displayName: Terragrunt Plan
      workingDirectory: $(System.DefaultWorkingDirectory)/azure-stag
    - script: echo "##vso[task.setvariable variable=planFailed]true"
      displayName: Terragrunt Plan Status Check
      condition: failed()
    - script: |
        chmod +x post-plan.sh
        ./post-plan.sh azure-stag
      env:
        FIREFLY_ACCESS_KEY: $(fireflyAccessKey)
        FIREFLY_SECRET_KEY: $(fireflySecretKey)
      displayName: Firefly Post-Plan
      workingDirectory: $(System.DefaultWorkingDirectory)
      condition: always()
    - script: |
        terragrunt run-all apply \
          --terragrunt-out-dir /tmp/outputs \
          --terragrunt-non-interactive
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
      condition: and(eq(variables['apply'], true),ne(variables['planFailed'], 'true'))
      workingDirectory: $(System.DefaultWorkingDirectory)/azure-stag
      displayName: Terragrunt Apply
