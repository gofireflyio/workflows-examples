stages:
  - plan
  - apply

variables:
  FIREFLY_ACCESS_KEY: $FIREFLY_ACCESS_KEY
  FIREFLY_SECRET_KEY: $FIREFLY_SECRET_KEY

image:  
  name: hashicorp/terraform:1.8.3
  entrypoint:
  - '/usr/bin/env'
  - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

before_script:
  - apk add curl jq
  - cd $TARGET_DIR
  # If AWS_PROFILES is defined, create AWS profile/s
  - |
    if [ ! -z "$AWS_PROFILES" ]; then
      mkdir -p ${CI_PROJECT_DIR}/.aws
      # Iterate through each profile in the JSON
      echo "$AWS_PROFILES" | jq -r 'to_entries[] | "\(.key) \(.value.key) \(.value.secret) \(.value.region)"' | while read -r profile key_var secret_var region; do
        if [ ! -z "$key_var" ] && [ ! -z "$secret_var" ]; then
          # Use profile-specific region or fall back to default
          profile_region=${region:-${AWS_DEFAULT_REGION:-us-east-1}}
          # Add to credentials file
          echo "" >> ${CI_PROJECT_DIR}/.aws/credentials
          echo "[$profile]" >> ${CI_PROJECT_DIR}/.aws/credentials
          echo "aws_access_key_id = $key_var" >> ${CI_PROJECT_DIR}/.aws/credentials
          echo "aws_secret_access_key = $secret_var" >> ${CI_PROJECT_DIR}/.aws/credentials
          
          # Add to config file
          echo "" >> ${CI_PROJECT_DIR}/.aws/config
          echo "[$profile]" >> ${CI_PROJECT_DIR}/.aws/config
          echo "region = $profile_region" >> ${CI_PROJECT_DIR}/.aws/config
        fi
      done
    fi
  - curl -O https://gofirefly-prod-iac-ci-cli-binaries.s3.amazonaws.com/fireflyci/latest/fireflyci_Linux_x86_64.tar.gz
  - tar -xf fireflyci_Linux_x86_64.tar.gz
  - chmod a+x fireflyci
  - terraform --version
  - terraform init >& init.log || ./fireflyci post-plan -f plan_output.json -i init.log --workspace ${WORKSPACE_NAME:-$TARGET_DIR}

plan:
  stage: plan
  script:
    - terraform plan -json -out=tf.plan ${EXTRA_ARGS} > plan_log.jsonl && terraform show -json tf.plan > plan_output.json && terraform show tf.plan > plan_output_raw.log || true
    - ./fireflyci post-plan -l plan_log.jsonl -f plan_output.json -i init.log --plan-output-raw-log-file plan_output_raw.log --workspace ${WORKSPACE_NAME:-$TARGET_DIR} --work-dir $TARGET_DIR
  rules:
    - when: always

apply:
  stage: apply
  script:
    - terraform apply -auto-approve -json ${EXTRA_ARGS} > apply_log.jsonl || true
    - ./fireflyci post-apply -f apply_log.jsonl --workspace ${WORKSPACE_NAME:-$TARGET_DIR}
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
